Q101          

create table UserActivity 
( username varchar(20),
activity varchar(20),
startdate date,
enddate date);

insert into UserActivity values
('Alice','Travel','2020-02-12','2020-02-20'),
('Alice','Dancing','2020-02-21','2020-02-23'),
('Alice','Travel','2020-02-24','2020-02-28'),
('Bob','Travel','2020-02-11','2020-02-18');


with cte as
(select distinct *
from UserActivity),

cte2 as
(select *,ROW_NUMBER() over (partition by username order by startdate desc) as rnk,
count(activity) over (partition by username) as num_of_activity
from cte)

select username,activity,startdate,enddate
from cte2
where rnk = 2 or num_of_activity = 1

Q103

select name
from STUDENTS 
where marks > 75
order by right(name,3),id;

Q104

SELECT name FROM Employee WHERE salary > 2000 AND months < 10 ORDER BY employee_id;


Q105

select case
when a+b <=c or b+c<=a or a+c<=b then 'Not A Triangle'
when a=b and b=c then 'Equilateral'
when a=b or b=c or a=c then 'Isosceles'
else 'Scalene' 
end
from TRIANGLES

Q106

CREATE TABLE EMPLOYEES 
(ID int,
name varchar(20),
salary int CONSTRAINT c1_chk CHECK (1000 < salary < 100000)
);
insert into EMPLOYEES values (1,'Kristeen',1420),
(2,'Ashley',2006),
(3,'Julia',2210),
(4,'Maria',3000);


select ceil(avg(salary) - avg(replace(salary, '0', ''))) from EMPLOYEES;


Q107

create table employee(employee_id int,name varchar(30),months int,salary int)

insert into employee values
(12228,'Rose',15,1968),
(33645,'Angela',1,3443),(45692,'Frank',17,1608),
(56118,'Patrick',7,1345),(59725,'Lisa',11,2330),
(74197,'Kimberly',16,4372),(78454,'Bonnie',8,1771),
(83565,'Michael',6,2017),(98607,'Todd',5,3396),
(99989,'Joe',9,3573);

select months*salary as salary, count(*) as count from employee
group by salary
order by salary desc
limit 1;


Q108

create table occupations(
name varchar(30),
occupation varchar(30),
check(occupation in ('Doctor', 'Professor', 'Singer','Actor'))
);
insert into occupations values
('Samantha','Doctor'),('Julia','Actor'),
('Maria','Actor'),('Meera','Singer'),
('Ashley','Professor'),('Ketty','Professor'),
('Christeen','Professor'),('Jane','Actor'),
('Jenny','Doctor'),('Priya','Singer');


select concat(name, '(', substring(occupation, 1, 1), ')') as name
from occupations
order by name;
select concat('There are a total of', ' ', count(occupation), ' ', 
lower(occupation), 's.') as profession
from occupations
group by occupation
order by profession;


Q109

Q110

create table BST(N int, P int);
insert into BST VALUES
(1,2),(3,2),(6,8),(9,8),(2,5),(8,5),(5,null);


select n,
case when p is null then 'Root'
when n in (select p from BST) then 'Inner'
else 'Leaf'
end 'nodetype'
from BST
order by n

Q111

create table company (company_code varchar(10),founder varchar(30));

create table lead_manager (lead_manager_code varchar(30),company_code 
varchar(10));

create table senior_manager (senior_manager_code varchar(30),lead_manager_code 
varchar(30),company_code varchar(10));

create table manager (manager_code varchar(3),senior_manager_code 
varchar(30),lead_manager_code varchar(30),company_code varchar(10));

create table employee1 (employee_code varchar(30),manager_code 
varchar(3),senior_manager_code varchar(30),lead_manager_code 
varchar(30),company_code varchar(10));

insert into company values('C1','Monika'),
('C2','Samantha');
insert into lead_manager values('LM1','C1'),
('LM2','C2');
insert into senior_manager values ('SM1','LM1','C1'),
('SM2','LM1','C1'),
('SM3','LM2','C2');
insert into manager values ('M1','SM1','LM1','C1'),
('M2','SM3','LM2','C2'),
('M3','SM3','LM2','C2');
insert into employee1 values ('E1','M1','SM1','LM1','C1'),
('E2','M1','SM1','LM1','C1'),
('E3','M2','SM3','LM2','C2'),
('E4','M3','SM3','LM2','C2');

select c.company_code, c.founder,
count(distinct l.lead_manager_code)lead_manager_count,
count(distinct s.senior_manager_code)senior_manager_count,
count(distinct m.manager_code)manager_count,
count(distinct e.employee_code)employee_count
from company as c 
join lead_manager as l 
on c.company_code = l.company_code
join senior_manager as s
on l.lead_manager_code = s.lead_manager_code
join manager as m 
on m.senior_manager_code = s.senior_manager_code
join employee1 as e
on e.manager_code = m.manager_code
group by c.company_code, c.founder
order by c.company_code;


Q113

set @number = 0;
select repeat('* ', @number := @number + 1) 
from information_schema.tables
where @number < 20;


Q114

set @number = 21;
select repeat('* ', @number := @number -1)
from information_schema.tables


Q115 same

Q116

create table functions (X int, Y int);

insert into functions values (20,20),
(20,20),(20,21),(23,22),(22,23),(21,20);

select distinct A.X,A.Y

from (select *,row_number() over (order by X) 'Row_Num' from Functions) A
join
(select *,row_number() over (order by X) 'Row_Num' from Functions) B
on A.X=B.Y and B.X=A.Y and A.Row_Num!=B.Row_Num and A.X<=A.Y order by A.X;


Q117 same

Q118 same

Q119 same

Q121

SELECT extract(month from event_date) as month, count(distinct user_id) "monthly_active_users"
FROM user_actions
where event_date between '07/01/2022' and '07/31/2022'
and user_id in (select user_id
                from user_actions
                where event_date between '06/01/2022' and '06/30/2022')
group by month;

Q122

with recursive searches_searies as
(
    select searches, num_users, 1 as n from search_frequency
    union all
    select searches, num_users, n + 1 from searches_searies
    where n + 1 <= num_users
)

select round(percentile_cont(0.5) within group (order by searches)::dec,1) as median
from searches_searies

Q123

SELECT user_id,
CASE 
      WHEN paid >0 and status IN ('NEW', 'EXISTING', 'RESURRECT') then 'EXISTING'
      WHEN paid >0 and status = 'CHURN' then 'RESURRECT'
      WHEN paid IS NULL then 'CHURN'
      else 'NEW' end as new_status
FROM advertiser
FULL OUTER JOIN daily_pay
USING (user_id) 
ORDER BY user_id;


Q124

SELECT SUM(uptime_days) AS total_uptime_days

FROM(SELECT server_id,
    (SUM(CASE WHEN session_status = 'stop' 
              THEN EXTRACT(day FROM date(status_time)) 
              ELSE -EXTRACT(day FROM date(status_time))
          END)) AS uptime_days
              
FROM server_utilization
GROUP BY server_id
ORDER BY server_id) AS temp_table


Q125

SELECT COUNT(*) as payment_count
FROM(
SELECT *, DATE_PART('minute', transaction_timestamp - LAG(transaction_timestamp) OVER(PARTITION BY merchant_id, credit_card_id, amount ORDER BY transaction_timestamp)) as minutes
FROM transactions) as minute_table
WHERE minutes < 10

Q126 not present in sheet


Q127 same

Q128,129 same

Q130

select dep_avg.month_year as pay_month,
department_id,
case when comp_Sal > dep_sal then 'lower'
when comp_Sal<dep_sal then 'higher'
else 'same' end as comparison
from
(select date_format(pay_date,'%Y-%m') month_year,avg(amount) as comp_Sal
from Salary
group by month_year) comp_avg
join

(select date_format(pay_date,'%Y-%m') month_year,department_id,avg(amount) as dept_Sal from Salary s join employee e
on s.employee_id = e.employee_id
group by month_year,department_id)dep_avg
on comp_avg.month_year = dep_avg.month_year;


Q131


Q132 same

Q133

with all_scores as (
select exam_id,min(score) as min_score, max(score) as max_score
from exams
group by exam_id)

select exams.student_id, exams.student_name
from exams
inner join all_scores on exam.exam_id = all_scores.exam_id
group by student_id
having max(case when score = min_score or score = max_score then 1 else 0 end) = 0

Q134 same as 133



Q135 same

Q136 same


Q137 same

Q138,139 same

Q 140

create table occupations(
name varchar(30),
occupation varchar(30),
check(occupation in ('Doctor', 'Professor', 'Singer','Actor'))
);

insert into occupations values
('Samantha','Doctor'),('Julia','Actor'),
('Maria','Actor'),('Meera','Singer'),
('Ashley','Professor'),('Ketty','Professor'),
('Christeen','Professor'),('Jane','Actor'),
('Jenny','Doctor'),('Priya','Singer');

WITH CTE AS (
select *, ROW_NUMBER() OVER(PARTITION BY OCCUPATION ORDER BY NAME) AS RN
from Occupations)

SELECT 
max(CASE WHEN OCCUPATION= 'Doctor' then Name end) as Doctor,
max(CASE when OCCUPATION= 'Professor' then Name end) as Professor,
max(CASE when OCCUPATION= 'Singer' then Name end) as Singer,
max(CASE when OCCUPATION= 'Actor' then Name end) as Actor
FROM CTE
group by RN


Q141 same 

Q143 same


Q144

CREATE TABLE Students (id int, name varchar(20));
CREATE TABLE Packages (id int, salary float);
CREATE TABLE Friends (id int, friend_id int);

INSERT INTO Students values(1,'Ashley'),(2,'samantha'),(3,'Julia'),(4,'Scarlet');
INSERT INTO Friends values(1,2),(2,3),(3,4),(4,1);
INSERT INTO Packages values(1,15.20),(2,10.06),(3,11.55),(4,12.22);

SELECT s.Name FROM Students s
JOIN Packages p1 ON s.ID = p1.ID
JOIN Friends f ON s.ID = f.ID
JOIN Packages p2 ON f.Friend_ID = p2.ID
WHERE p2.Salary > p1.Salary
ORDER BY p2.Salary;

Q145



Q146

create table project 
(task_id int, start_date date, end_date date);

insert into project values (1,'2015-10-01','2015-10-02'),
(2,'2015-10-02','2015-10-03'),(3,'2015-10-03','2015-10-04'),
(4,'2015-10-13','2015-10-14'),(5,'2015-10-14','2015-10-15'),
(6,'2015-10-28','2015-10-29'),(7,'2015-10-30','2015-10-31');

SELECT Start_Date, min(End_Date) as End_Date
FROM
(SELECT Start_Date FROM projects WHERE Start_Date NOT IN (SELECT End_Date FROM
projects)) a ,
(SELECT End_Date FROM projects WHERE End_Date NOT IN (SELECT Start_Date FROM
projects)) b
WHERE Start_Date < End_Date
GROUP BY Start_Date
ORDER BY DATEDIFF(min(End_Date), Start_Date) ASC, Start_Date ASC;

Q147

create table transactions (user_id int,amount float, transaction_date timestamp);

insert into transactions values (1,9.99,'2022-08-01 10:00:00'),
(1,55,'2022-08-17 10:00:00'),
(2,149.5,'2022-08-05 10:00:00'),
(2,4.89,'2022-08-06 10:00:00'),
(2,34,'2022-08-07 10:00:00');

SELECT DISTINCT T1.user_id
FROM transactions AS T1
INNER JOIN transactions AS T2
ON DATE(T2.transaction_date) = DATE(T1.transaction_date) + 1
INNER JOIN transactions AS T3
ON DATE(T3.transaction_date) = DATE(T1.transaction_date) + 2
ORDER BY T1.user_id;

Q148



create table payments(payer_id int,recipient_id int,amount int);
insert into payments values (101,201,30),

(201,101,10),
(101,301,20),
(301,101,80),
(201,301,70);

select * from payments

with cte as(
    select payer_id, recipient_id
    from payments
    intersect
    select recipient_id, payer_id
    from payments
)

SELECT COUNT(payer_id)/2 AS unique_relationships
from cte;


Q149


create table user_transactions (transaction_id int, user_id int, 
spend float,transaction_date timestamp);

insert into user_transactions values
(759274,111,49.50,'2022-02-03 00:00:00'),
(850371,111,51.00,'2022-03-15 00:00:00'),
(615348,145,36.30,'2022-03-22 00:00:00'),
(137424,156,151.00,'2022-04-04 00:00:00'),
(248475,156,87.00,'2022-04-16 00:00:00');

select count(distinct user_id) as users
from ( select
user_id,spend, rank() over (partition by user_id order by transaction_date asc) as row_num

from user_transactions) as transactions

where row_num = 1 and spend >= 50



Q150

create table measurements 
(measurement_id int,measurement_value FLOAT,measurement_time datetime);

insert into measurements values
(131233,1109.51,'2022-07-10 09:00:00'),
(135211,1662.74,'2022-07-10 11:00:00'),
(523542,1246.24,'2022-07-10 13:15:00'),
(143562,1124.50,'2022-07-11 15:00:00'),
(346462,1234.14,'2022-07-11 16:45:00');

with cte AS(

select cast(measurement_time as date) as measurement_day, measurement_value,
row_number() over(PARTITION BY cast(measurement_time as date) ORDER BY measurement_time)
as measurement_num

from measurements
)

select measurement_day,
SUM(
  case when measurement_num %2 !=0 then measurement_value else 0 end) as odd_num,
  
SUM(
  case when measurement_num%2 =0 then measurement_value else 0 end) as even_num
  
from cte
group by measurement_day


Q151

same

Q152

create table rental_amenities
(rental_id int,amenity varchar(30));

insert into rental_amenities values
(123,'pool'),
(123,'kitchen'),
(234,'hot tub'),
(234,'fireplace'),
(345,'kitchen'),
(345,'pool'),
(456,'pool');

WITH airbnb_amenities AS (
SELECT
rental_id,
group_concat(amenity ORDER BY amenity) AS amenities
FROM rental_amenities
GROUP BY rental_id)
SELECT COUNT(*) AS matching_airbnb
FROM airbnb_amenities AS airbnb1 JOIN airbnb_amenities AS airbnb2
ON airbnb1.amenities = airbnb2.amenities
WHERE airbnb1.rental_id > airbnb2.rental_id;


Q153

Create table ad_campaigns
(campaign_id int, spent int,
revenue float, advertiser_id int);

insert into ad_campaigns values (1,5000,7500,3),(2,1000,900,1),
(3,3000,12000,2),(4,500,2000,4),(5,100,400,4);

SELECT
advertiser_id,
ROUND(((SUM(revenue) / SUM(spent))), 2) AS ROAS
FROM ad_campaigns
GROUP BY advertiser_id
ORDER BY advertiser_id;


Q154

create table employee_pay(employee_id int, salary int,title varchar(20));

insert into employee_pay values
(101,80000,'Data Analyst'),
(102,90000,'Data Analyst'),
(103,100000,'Data Analyst'),
(104,30000,'Data Analyst'),
(105,120000,'Data Scientist'),
(106,100000,'Data Scientist'),
(107,80000,'Data Scientist'),
(108,310000,'Data Scientist');


with cte as(

    SELECT employee_id,salary,title,
    (avg(salary) over (partition by title)) * 2 as double_average,
    (avg(salary) over (partition by title)) / 2 as half_average
from employee_pay
)

SELECT
employee_id,salary,
case when salary > double_average then 'Overpaid'
    when salary < half_average then 'Underpaid'
end as outlier_status

from cte
where salary > double_average or salary < half_average; 


Q155

same

Q156

create table purchases 
(user_id int,product_id int,quantity int,purchase_date datetime);

insert into purchases values
(536,3223,6,'2022-01-11 12:33:44'),
(827,3585,35,'2022-02-20 14:05:26'),
(536,3223,5,'2022-03-02 09:33:28'),
(536,1435,10,'2022-03-02 08:40:00'),
(827,2452,45,'2022-04-09 00:00:00');


select count(distinct p1.user_id) as repeated
from purchases as p1
inner join purchases as p2
on p1.product_id = p2.product_id and p1.purchase_date <> p2.purchase_date



Q157

create table transactions 
(
transaction_id integer,
type enum('deposit','withdrawal'),
amount float,
transaction_date timestamp
);

insert into transactions values
(19153,'deposit',65.90,'2022-07-10 10:00:00'),
(53151,'deposit',178.55,'2022-07-08 10:00:00'),
(29776,'withdrawal',25.90,'2022-07-08 10:00:00'),
(19153,'withdrawal',45.99,'2022-07-08 10:00:00'),
(77134,'deposit',32.60,'2022-07-10 10:00:00');

with cte AS(

    select transaction_date,
    EXTRACT(day from transaction_date) AS transaction_day,
    EXTRACT(month from transaction_date) AS transaction_month,
    ROUND((sum(case when type = 'deposit' then amount
        when type = 'withdrawal' then  -amount end)),2) as balance

from transactions
group by transaction_date,transaction_day,transaction_month)

select transaction_date, sum(balance) over (partition by transaction_month order by transaction_day) as balance
from cte
order by transaction_day;

)


Q158

create table product_spend 
(
category varchar(20),
product varchar(20),
user_id int,
spend float,
transaction_date timestamp
);

insert into product_spend VALUES
('appliance','refrigerator',165,246.00,'2021-12-26 12:00:00'),
('appliance','refrigerator',123,299.99,'2022-03-02 12:00:00'),
('appliance','washing machine',123,219.80,'2022-03-02 12:00:00'),
('electronics','vacuum',178,152.00,'2022-04-05 12:00:00'),
('electronics','wireless headset',156,249.90,'2022-08-07 12:00:00'),
('electronics','vacuum',145,189.00,'2022-07-15 12:00:00');

with cte1 AS(

select sum(spend) as total_spend,category,product
FROM product_spend
where extract(year FROM transaction_date) = '2022'
group by category,product),

cte2 as(

select *, dense_rank() over(PARTITION BY category  ORDER BY total_spend desc)

from cte1
group by total_spend,category,product)

select category,product,total_spend
from cte2
where dense_rank <= 2 



